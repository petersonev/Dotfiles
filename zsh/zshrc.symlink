# Path to your oh-my-zsh installation.

if [ -L ${(%):-%N} ]; then
    pushd $(dirname $(readlink ${(%):-%N})) > /dev/null
else
    pushd $(dirname ${(%):-%N}) > /dev/null
fi
curr=$(pwd)
popd > /dev/null


function _bash_function () {
	# Yes this IO redirection works
    eval "$2() { exec 4>&1; bash $1 $2 \$@ 3>&1 >&- >&4 | while read line; do eval \$line; if [ -n \"\$_status\" ]; then return \$_status; exec 4>&-; fi; done; exec 4>&-;  }"
}

function _bash_run () {
    eval "exec 4>&1; bash $1 \$@ 3>&1 >&- >&4 | while read line; do eval \$line; if [ -n \"\$_status\" ]; then return \$_status; exec 3>&-; fi; done"
}

_bash_func_script="$curr/../shell/functions.sh"
_bash_alias_script="$curr/../shell/aliases.sh"
_bash_var_script="$curr/../shell/variables.sh"

_bash_functions=$(bash -c ". $_bash_func_script > /dev/null; compgen -A function" | sed -e '/^_/ d')
#echo $_bash_functions

# Add all functions
echo $_bash_functions | while read _func; do
    _bash_function $_bash_func_script $_func
    #echo $_func
done

# Add all aliases
_bash_run $_bash_alias_script

# Add all variables
_bash_run $_bash_var_script




export ZSH="$curr/oh-my-zsh"
export EDITOR="vim"


stty erase '^?'

#source ~/.zsh-private

#eval "$(fasd --init posix-alias zsh-hook)"
#eval "$(fasd --init auto)"

plugins=(git)

# User configuration
source $ZSH/oh-my-zsh.sh

unset zle_bracketed_paste

function makePrompt () {
     local exit_status=$?
     OUT=""
 
     local prompt_char=$'\xE2\x9D\xAF'
 
     local color_TRUE="%{\033[34m%}"
     local color_FALSE="%{\033[37m%}"
     local color_ERROR="%{\033[31m%}"
 
     local color_user=$color_FALSE
     local color_jobs=$color_FALSE
     local color_exit=$color_TRUE
 
     if [ "$USER" = "root" ]; then
         color_user=$color_ERROR
     fi
     if [ $(jobs | wc -l | tr -d " ") -ne 0 ]; then
         color_jobs=$color_TRUE
     fi
     if [ $exit_status -ne 0 ]; then
         color_exit=$color_ERROR
     fi
 
     if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
         OUT="$PS1$color_TRUE\h:"
     fi
 
     #OUT="$prompt_char "
     OUT="$OUT$color_TRUE%1~ "
     OUT="$OUT$color_user$prompt_char"
     OUT="$OUT$color_jobs$prompt_char"
     OUT="$OUT$color_exit$prompt_char "
     OUT="$OUT$color_FALSE"
     echo -e $OUT
 }

export PROMPT='$(makePrompt)'

function makeRPrompt () {
  local b="$(git symbolic-ref HEAD 2>/dev/null)";
  local ARROW=''  #$'\xEE\x82\xB2'
  local GIT='g'   #$'\xEE\x82\xA0'

  if [ -n "$b" ]; then
    OUT="%{\e[38;5;235m%}$ARROW%{\e[48;5;241;38;5;248m%} ${b##refs/heads/} %{\e[38;5;28m%}$ARROW%{\e[48;5;28;39m%} $GIT %{\e[0m%}"
  fi

  echo -e $OUT
}

function makeRPrompt2 () {
    local prompt_char=$'\xE2\x9D\xAE'
    local is_git="$(git symbolic-ref HEAD 2>/dev/null)";

    local color_TRUE="%{\033[34m%}"
    local color_FALSE="%{\033[37m%}"
    local color_ERROR="%{\033[31m%}"

    if [ -n "$is_git" ]; then
        local color_git=$color_FALSE
        local color_untracked=$color_FALSE
        local color_modified=$color_FALSE
        local color_staged=$color_FALSE
        local git_status=0

        (git diff --cached --quiet 2> /dev/null)
        local is_staged=$?
        local is_untracked="$(git ls-files-root --other --exclude-standard 2> /dev/null)";
        #(git diff --quiet 2> /dev/null)
        #local is_modified=$?
        local is_modified="$(git ls-files -m)"
    
        if [ "$is_staged" = 1 ]; then
            local color_staged=$color_TRUE
            local git_status=1
        fi
        if [[ $is_untracked = *[!\ ]* ]]; then
            local color_untracked=$color_TRUE
            local git_status=2
        fi
        if [ -n "$is_modified" ]; then 
            local color_modified=$color_TRUE
            local git_status=2
        fi

        case $git_status in
            0)
                local color_git="%{\033[32m%}"
                ;;
            1)
                local color_git="%{\033[33m%}"
                ;;
            2)
                local color_git=$color_ERROR
                ;;
        esac

        local git_branch="$(git rev-parse --abbrev-ref HEAD 2> /dev/null)";

        echo -ne "$color_staged$prompt_char"
        echo -ne "$color_modified$prompt_char"
        echo -ne "$color_untracked$prompt_char"
        echo -ne "$color_git $git_branch"
        echo -ne "$color_FALSE"

    fi
}

export RPROMPT='$(makeRPrompt2)'

source $ZSH/../zsh-autosuggestions/zsh-autosuggestions.zsh
source $ZSH/../zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
